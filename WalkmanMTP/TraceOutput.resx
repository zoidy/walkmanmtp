<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAQAEBAQAAEABAAoAQAARgAAABAQAAABAAgAaAUAAG4BAAAQEAAAAQAYAGgDAADWBgAAEBAAAAEA
        IABoBAAAPgoAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAACA
        AACAgAAAAACAAIAAgAAAgIAAwMDAAICAgAD/AAAAAP8AAP//AAAAAP8A/wD/AAD//wD///8AA5OTOTOI
        MzAI/3/4h3h4MAN3t7d3d4eACPd3d3eHd4AD+3uH+LuHiAj/f3f4f494A/f393eId4AI9/939393gAP/
        9/d3d3dwCPf/f3d3fzAD/39/93d/gAj39/d3//8wA//3/3f/d4AI93d3d/d4AAP/////94AACDiIiIg4
        AACAAQAAgAEAAIABAACAAQAAgAAAAIAAAACAAQAAgAEAAIABAACAAQAAgAEAAIABAACAAQAAgAMAAIAH
        AACADwAAKAAAABAAAAAgAAAAAQAIAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABeXl4AdGFUAGVl
        ZQBpaWkAbW1tAHJycgC6aDMAu2g0ALtoNQC7aTUAu2s4AL1uPQDAdT4Ai2xXAMF7QQDCf0cAxH9EAMB4
        SQCminUAsZZ/AMWCRgDFhEkAxIRKAMaFSgDGhksAxopNAMaKTgDGi08AxotRAMeNUwDGj1cAyI5TAMmO
        UwDIj1MAyI5UAMCBWQDDhF0AyZFYAPeyTwD3slEA97VUAPe0VgD4tFUAyZdjAMmZawDblGgA25ZpAMmb
        eADNoHMA+75lAPy+ZAD8vWcA/b9oAOGwfQDisn0A/cJuAIGBgQCGhoYAh4eHAIiIiACKiooAi4uLAJuX
        kQCamJQAmZmZAJqZmACcmpgAnJycAKCgoAChoaEAoqKiAKWlpQCrq6sAs66oALGwsAC0tLQAtbW1ALa2
        tgC3t7cAuLi4ALq5uAC6uroAvb29AL69vAC+vr4Av7+/AM6igADOrJYAzq2ZAM26nADitoQA0rijAPnT
        nAD/154A/9igAOTPvADx0rMA89S1APbYtAD01rgA9da6APXWuwD22LsA9tm8AMDAwADCwsIAxMTEAMjG
        wwDJyckAysrKANfMxADUz8oA39PJANLS0gDU1NQA1dXVANbW1gDY2NgA2dnZANvZ2ADa2toA29vbANza
        2QDd3d0A7djIAPjbwQD43MIA+d3EAPnfxQD638cA+uDHAPngyAD64MgA++DIAPvgyQD74ckA++LJAPrh
        ygD74ssA+uXJAPvhzAD7480A++POAPzizAD8480A/OPPAPzmzQD85M8A8ubXAPvk0AD85NEA/eXTAPzm
        0gD85tMA/efTAP7l1QD85tQA/ebUAP3n1QD959YA/ufWAP7n1wD+6NYA/ujXAPbq3AD06d8A9OreAPbq
        3gD2694A/ujYAOHh4QDi4uIA6OjoAPft4wD17+kA9u/pAPfw5gD18OoA9/LsAPfz7QD48egA+PLrAPjy
        7AD58+wA+PPtAPj07QD59O0A+fTvAPr07wD49PAA+fTwAPn18QD79/MA/fv4AP/7+ABcXFwAAAAAwAAA
        AAC4CKsAAgAAAIAAAAAAAAAA6FauAaz0xQA1a0wADAAAAAAAAAABAAAAQzpcRAoAAABlbnRzIGFuZCBT
        ZXR0aW5nc1xyb2NrM3JcRG9jdW1lbnRpXFZpc3VhbCBTdAAAAABw9zkAOFx3Yf/pkXz2DYF8NAEAAAAA
        AAAAAAAAAAAAAEQJqwBw9zkARgAAAAAAAAAWDoF8RgAAAOgJqwBGAAAAE3NKAEYAAAAAAAAARgAAADAJ
        qwBACasA+AmrAKiag3wgDoF8/////xYOgXyMZEwANAEAAHD3OQBGAAAAlAmrAAAAAAAAWCUMCgoKCQgH
        BsQLJFkAABKwqamopUoEcEc+bAECAAANpzU0MjNFbUhuakZrBQAAD644X15dWm1TQ0BNag4AABGxKyop
        SE+rRCgnP3RBAwAVtZyYmExurTqQh0KsTjsAFrahoKCgb3JJOT1MbhMAABm4o6SgoFJ5VnV2UHM8AAAa
        u6qqpKFxVH1pVWBLFAAAG7yioJ+emY2CUUxnvRgAABy/mp2bl46Ff2ZiYb4XAAAcwJKWlJGKgGims8Gv
        EAAAHcCRj46LhH9lwpOMWzAAAB/Ag4iJhoF+ZMNjNi4AAAAtsrS6ubm5t7OVNy8AAAAAXDEmIyAgIiEe
        LFcAAAAAgAEAAIABAACAAQAAgAEAAIAAAACAAAAAgAEAAIABAACAAQAAgAEAAIABAACAAQAAgAEAAIAD
        AACABwAAgA8AACgAAAAQAAAAIAAAAAEAGAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAADOrJbDhF29
        bj27aTW7aTW7aTW7aDW7aDS6aDNycnJcXFy7azjAgVnOrZkAAAAAAADAeEn27+n2697269726t726tyz
        rqhpaWnUz8qioqKLi4vIxsNeXl50YVQAAAAAAADAdT706t79v2j8vWf7vmX8vmSgoKDJycmlpaXKysrC
        wsKhoaHExMRtbW0AAAAAAADBe0H37eP9wm7/2KD/157505zNupzJycm9vb2cmpiamJS1tbXCwsKLbFcA
        AAAAAADEf0T38Ob4tFX3tFb3tVSlpaW3t7fh4eGcnJz3slH3sk+bl5HV1dWZmZllZWUAAADFgkb48ej+
        5dX95dP95dO0tLTKysro6OiGhob84sz74MmamZji4uK2traHh4cAAADFhEn48uv+59b959b959b959bX
        zMTS0tKrq6uBgYGKioq0tLTKysqminUAAAAAAADGhkv58+z+6Nb+6Nf959b959a6urra2tq/v7/W1tbY
        2Ni4uLjU1NSIiIgAAAAAAADGik359O3+6Nj+6Nj+6Nf+59bf08m+vbzt2MjAwMC+vr7kz7yxsLCxln8A
        AAAAAADGik759O/+59f959b959X95tT85tL74cz638e6ubi0tLT22Lv69O/GhUoAAAAAAADGi0/59PD8
        5tP85tT959P85NH748364Mj43ML11rvz1LXx0rP49PDEhEoAAAAAAADGi0/59fH848/75ND85M/84836
        4cr53cT22bz06d/38uz79/P17+nCf0cAAAAAAADGi1H59fH84837487748374sv54Mj43ML11rr9+/j8
        5s365cnitoTJm3gAAAAAAADGj1f59fH64Mf74cn74sn74Mj538X428H01rj/+/j22LThsH3blGgAAAAA
        AAAAAADJmWv18Or38+349O348+348+348+348uz38uzy5tfisn3blmkAAAAAAAAAAAAAAADSuKPNoHPJ
        kVjIjlTIjlPIjlPIj1PJjlPHjVPJl2POooAAAAAAAAAAAAAAAACAAQAAgAEAAIABAACAAQAAgAAAAIAA
        AACAAQAAgAEAAIABAACAAQAAgAEAAIABAACAAQAAgAMAAIAHAACADwAAKAAAABAAAAAgAAAAAQAgAAAA
        AABABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC7ajRrumUwvLtmMe26ZjD3umYw97pmMPe6ZTD3umUv97ll
        LvdycnL/XFxc/7lkLu+3Yiy9t2IuYwAAAAAAAAAAvGkz3vjx6vL37N/99uve//bq3v/26tz/s66o/2lp
        af/Uz8r/oqKi/4uLi//IxsP+Xl5e/29bTvMAAAAAAAAAAL9xOPX169/+/b9o//y9Z//7vmX//L5k/6Cg
        oP/Jycn/paWl/8rKyv/CwsL/oaGh/8TExP9tbW3/bm5uAwAAAADBeDz39+3j//3Cbv//2KD//9ee//nT
        nP/Nupz/ycnJ/729vf+cmpj/mpiU/7W1tf/CwsL/i2tW/GVlZRIAAAAAxHxA9/fw5v/4tFX/97RW//e1
        VP+lpaX/t7e3/+Hh4f+cnJz/97JR//eyT/+bl5H/1dXV/5mZmf9lZWX/AAAAAMWAQvf48ej//uXV//3l
        0//95dP/tLS0/8rKyv/o6Oj/hoaG//zizP/74Mn/mpmY/+Li4v+2trb/h4eH/wAAAADFgkX3+PLr//7n
        1v/959b//efW//3n1v/XzMT/0tLS/6urq/+BgYH/ioqK/7S0tP/Kysr/pop0/AAAAAAAAAAAxoRH9/nz
        7P/+6Nb//ujX//3n1v/959b/urq6/9ra2v+/v7//1tbW/9jY2P+4uLj/1NTU/4iIiP+GhoYKAAAAAMaI
        Sff59O3//ujY//7o2P/+6Nf//ufW/9/Tyf++vbz/7djI/8DAwP++vr7/5M+8/7GwsP+xln78AAAAAAAA
        AADGiEr3+fTv//7n1//959b//efV//3m1P/85tL/++HM//rfx/+6ubj/tLS0//bYu//69O//xoNG9wAA
        AAAAAAAAxolL9/n08P/85tP//ObU//3n0//85NH/++PN//rgyP/43ML/9da7//PUtf/x0rP/+PTw/8SC
        RvcAAAAAAAAAAMaJS/f59fH//OPP//vk0P/85M///OPN//rhyv/53cT/9tm8//Tp3//38uz/+/fz//Xv
        6f/CfkX7AAAAAAAAAADGiUz2+fXx//zjzf/7487/++PN//viy//54Mj/+NzC//XWuv/9+/j//ObN//rl
        yf/itoT/v3lCpgAAAAAAAAAAxYhL6vr28vz64Mf/++HJ//viyf/74Mj/+d/F//jbwf/01rj///v4//bY
        tP/hsH3/25Jk9rRrPgcAAAAAAAAAAMSFScP38uzs+PTu/Pj07f/48+3/+PPt//jz7f/48uz/9/Ls//Lm
        1//isn3/25Rl9bNoOwcAAAAAAAAAAAAAAADBfURgyItNu8iMT+7IjE/2yIxP98iMT/fIjU/3yYxP98eL
        T/fFiUvUxHY7kbNoPAYAAAAAAAAAAAAAAACAAQAAgAEAAIAAAACAAAAAgAAAAIAAAACAAQAAgAAAAIAB
        AACAAQAAgAEAAIABAACAAQAAgAEAAIADAACABwAA
</value>
  </data>
</root>